<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from pan_tilt.urdf.xacro            | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="pan_tilt" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!--

  IMPORTANT!

  If you modify this Xacro based URDF description, please run:
  . update_urdf.sh
  from directory:
    pan_tilt_description/urdf/
  to generate a new URDF.
  The generated URDF will then be used by Gazebo to spawn the pan_tilt bot.

  Failure to do this will result in your change being not reflected in simulation.
  -->
  <!-- Documentation on URDF: http://wiki.ros.org/urdf/XML -->
  <!-- Documentation on Xacro: http://wiki.ros.org/xacro -->
  <!-- Make color of body and head red. -->
  <gazebo reference="base_link">
    <material>Gazebo/DarkYellow</material>
  </gazebo>
  <gazebo reference="head_link">
    <material>Gazebo/White</material>
  </gazebo>
  <!-- Make colour of right camera red. -->
  <gazebo reference="camera_link_right">
    <material>Gazebo/Red</material>
  </gazebo>
  <!-- Make colour of left camera blue. -->
  <gazebo reference="camera_link_left">
    <material>Gazebo/Blue</material>
  </gazebo>
  <!-- right camera -->
  <gazebo reference="camera_link_right">
    <sensor name="camera1" type="camera">
      <!--
    <update_rate>
        Number of times per second a new camera image is taken within Gazebo. 
        This is the maximum update rate the sensor will attempt during simulation but 
        it could fall behind this target rate if the physics simulation runs faster than 
        the sensor generation can keep up.
     -->
      <update_rate>30.0</update_rate>
      <!-- Specification of camera. Note: Pixels are assumed to be square. -->
      <camera name="cam1">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <!-- 
        The <near> and <far> clips are simulation-specific parameters 
        that give an upper and lower bound to the distance in which the 
        cameras can see objects in the simulation. -->
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <!-- 
        <cameraName>
            Defines the name of this camera in ROS.
        -->
        <cameraName>stereo/right</cameraName>
        <!-- 
        <imageTopicName> 
            Defines the topic name the camera will be publishing images to
            in ROS. 
        -->
        <imageTopicName>image_raw</imageTopicName>
        <!-- 
        <cameraInfoTopicName> 
            Defines the topic name the camera will publish information about 
            itself in ROS.
        -->
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <!-- 
        <frameName>
            The coordinate frame the image is published under in the tf tree. 
        -->
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <!-- left camera -->
  <gazebo reference="camera_link_left">
    <sensor name="camera2" type="camera">
      <!--
    <update_rate>
        Number of times per second a new camera image is taken within Gazebo. 
        This is the maximum update rate the sensor will attempt during simulation but 
        it could fall behind this target rate if the physics simulation runs faster than 
        the sensor generation can keep up.
     -->
      <update_rate>30.0</update_rate>
      <!-- Specification of camera. Note: Pixels are assumed to be square. -->
      <camera name="cam1">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <!-- 
        The <near> and <far> clips are simulation-specific parameters 
        that give an upper and lower bound to the distance in which the 
        cameras can see objects in the simulation. -->
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <!-- 
        <cameraName>
            Defines the name of this camera in ROS.
        -->
        <cameraName>stereo/left</cameraName>
        <!-- 
        <imageTopicName> 
            Defines the topic name the camera will be publishing images to
            in ROS. 
        -->
        <imageTopicName>image_raw</imageTopicName>
        <!-- 
        <cameraInfoTopicName> 
            Defines the topic name the camera will publish information about 
            itself in ROS.
        -->
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <!-- 
        <frameName>
            The coordinate frame the image is published under in the tf tree. 
        -->
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="orange">
    <color rgba="179.0 107.0 0.0 1.0"/>
  </material>
  <link name="world"/>
  <!-- Description of base. -->
  <link name="base_link">
    <collision>
      <geometry>
        <box size="0.6 0.3 0.3"/>
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0 0 0.3"/>
    </collision>
    <visual>
      <geometry>
        <!-- http://wiki.ros.org/rviz/DisplayTypes/Axes -->
        <!-- Red, Green, Blue -->
        <!-- x, y, z -->
        <box size="0.6 0.3 0.3"/>
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0 0 0.3"/>
      <material name="white"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="1"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!-- Description of head. -->
  <link name="head_link">
    <collision>
      <geometry>
        <box size="0.15 0.15 0.15"/>
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <box size="0.15 0.15 0.15"/>
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0 0 0"/>
      <material name="orange"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="1"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!-- Description of right camera. -->
  <link name="camera_link_right">
    <collision>
      <geometry>
        <box size="0.025 0.025 0.025"/>
      </geometry>
    </collision>
    <visual>
      <geometry>
        <box size="0.025 0.025 0.025"/>
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0.025 0 0"/>
    </visual>
    <inertial>
      <mass value="1e-5"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- Description of left camera. -->
  <link name="camera_link_left">
    <collision>
      <geometry>
        <box size="0.025 0.025 0.025"/>
      </geometry>
    </collision>
    <visual>
      <geometry>
        <box size="0.025 0.025 0.025"/>
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0.025 0.070 0"/>
      <material name="blue"/>
    </visual>
    <inertial>
      <mass value="1e-5"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- Attach right camera to head. -->
  <joint name="right_cam_to_head" type="fixed">
    <axis xyz="0 1 0"/>
    <!-- Determine measurements xyz. -->
    <origin rpy="0 0 0" xyz="0.063 -0.035 0.035"/>
    <parent link="head_link"/>
    <child link="camera_link_right"/>
  </joint>
  <!-- Attach left camera to head. -->
  <joint name="left_cam_to_head" type="fixed">
    <axis xyz="0 1 0"/>
    <!-- Determine measurements xyz. -->
    <origin rpy="0 0 0" xyz="0.063 -0.035 0.035"/>
    <parent link="head_link"/>
    <child link="camera_link_left"/>
  </joint>
  <!-- Attach base to world. -->
  <joint name="base_to_world" type="fixed">
    <parent link="world"/>
    <child link="base_link"/>
  </joint>
  <!-- Roll is around x, yaw is around z, and pitch is around y. -->
  <!-- Connect head with base which allows the head to move in 3D. -->
  <joint name="head_to_base" type="revolute">
    <parent link="base_link"/>
    <child link="head_link"/>
	<limit effort="1000.0" lower="0.0" upper="3.1412" velocity="0.5"/>
	<axis xyz="0 0 1"/>
    <origin xyz="0 0 0.68"/>
  </joint>
</robot>
