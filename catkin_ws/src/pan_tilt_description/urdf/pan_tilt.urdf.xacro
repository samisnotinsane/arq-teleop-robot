<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="pan_tilt_bot">
  
  <!--

  IMPORTANT!

  If you modify this Xacro based URDF description, please run:
  . update_urdf.sh
  from directory:
    pan_tilt_description/urdf/
  to generate a new URDF.
  The generated URDF will then be used by Gazebo to spawn the pan_tilt bot.

  Failure to do this will result in your change being not reflected in simulation.
  -->

  <!-- Documentation on URDF: http://wiki.ros.org/urdf/XML -->
  <!-- Documentation on Xacro: http://wiki.ros.org/xacro -->

  <!-- Xacro properties are constants. -->
  <!-- Size of square 'camera' box -->
  <xacro:property name="camera_link" value="0.025" />

  <!-- Dimensions of base. -->
  <xacro:property name="base_link_size_x" value="0.6" />
  <xacro:property name="base_link_size_y" value="0.3" />
  <xacro:property name="base_link_size_z" value="0.3"/>

  <!-- Dimensions of head. -->
  <xacro:property name="head_link_size_x" value="0.15" />
  <xacro:property name="head_link_size_y" value="0.15" />
  <xacro:property name="head_link_size_z" value="0.15" />
  
  <!-- Origin position of head.  -->
  <!-- 
    *BUG*: 
    For some mysterious reason, even when all values are 0,
    the link refuses to stay grounded and floats above base.
  -->
  <xacro:property name="head_link_origin_x" value="0" />
  <xacro:property name="head_link_origin_y" value="0" />
  <xacro:property name="head_link_origin_z" value="0" />

  <!-- Import all Gazebo-customisation elements, including Gazebo colours. -->
  <xacro:include filename="$(find pan_tilt_description)/urdf/pan_tilt.gazebo" />

  <!-- Import Rviz colours. -->
  <xacro:include filename="$(find pan_tilt_description)/urdf/materials.xacro" />
  
  <link name="world"/>

  <!-- Description of base. -->
  <link name="base_link">
    <collision>
      <geometry>
        <box size="${base_link_size_x} ${base_link_size_y} ${base_link_size_z}"/>
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0 0 0.3"/>
    </collision>

    <visual>
      <geometry>
      <!-- http://wiki.ros.org/rviz/DisplayTypes/Axes -->
      <!-- Red, Green, Blue -->
      <!-- x, y, z -->
        <box size="${base_link_size_x} ${base_link_size_y} ${base_link_size_z}"/> 
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0 0 0.3"/>
      <material name="white" />
    </visual>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1"/>
      <inertia
        ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0"/>
    </inertial>
  </link>

  <!-- Description of head. -->
  <link name="head_link">
    <collision>
      <geometry>
        <box size="${head_link_size_x} ${head_link_size_y} ${head_link_size_z}" />
      </geometry>
      <origin rpy="0 0 0" xyz="${head_link_origin_x} ${head_link_origin_y} ${head_link_origin_z}"/>
    </collision>

    <visual>
      <geometry>
        <box size="${head_link_size_x} ${head_link_size_y} ${head_link_size_z}" />
      </geometry>
      <origin rpy="0 0 0" xyz="${head_link_origin_x} ${head_link_origin_y} ${head_link_origin_z}"/>
      <material name="orange" />
    </visual>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1"/>
      <inertia
        ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0"/>
    </inertial>

  </link>

  <!-- Description of right camera. -->
  <link name="camera_link_right">
    <collision>
      <geometry>
        <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
    </collision>

    <visual>
      <geometry>
         <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0.025 0 0"/>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
      <origin xyz="0 0 0" rpy="0 0 0" />
    </inertial>
  </link>

  <!-- Description of left camera. -->
  <link name="camera_link_left">
    <collision>
      <geometry>
        <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
    </collision>

    <visual>
      <geometry>
         <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0.025 0.070 0"/>
       <material name="blue" />
    </visual>

    <inertial>
      <mass value="1e-5" />
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
      <origin xyz="0 0 0" rpy="0 0 0" />
    </inertial>
  </link>

  <!-- Attach right camera to head. -->
  <joint name="right_cam_to_head" type="fixed">
    <axis xyz="0 1 0" />
    <!-- Determine measurements xyz. -->
    <origin rpy="0 0 0" xyz="0.063 -0.035 0.035" />
    <parent link="head_link" />
    <child link="camera_link_right" />
  </joint>

  <!-- Attach left camera to head. -->
  <joint name="left_cam_to_head" type="fixed">
    <axis xyz="0 1 0" />
    <!-- Determine measurements xyz. -->
    <origin rpy="0 0 0" xyz="0.063 -0.035 0.035" />
    <parent link="head_link" />
    <child link="camera_link_left" />
  </joint>

  <!-- Attach base to world. -->
  <joint name="base_to_world" type="fixed">
    <parent link="world"/>
    <child link="base_link"/>
  </joint>

  <!-- Roll is around x, yaw is around z, and pitch is around y. -->


  <!-- Connect head with base which allows the head to move in 3D. -->
  <joint name="head_to_base" type="revolute">
    <parent link="base_link" />
    <child link="head_link" />
    <limit effort="1000.0" lower="-1.571" upper="1.571" velocity="0.5"/>
	  <axis xyz="0 0 1"/>
    <origin xyz="0 0 0.68" />
  </joint>

  <!-- Use transmission to link motor to head joint. -->
  <transmission name="transmission1">
    <!-- Gazebo only supports transmission_interface/SimpleTransmission -->
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="head_to_base">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="actuator1">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

</robot>
