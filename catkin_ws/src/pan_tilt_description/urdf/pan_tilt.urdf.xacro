<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="pan_tilt">
  <!-- Documentation on URDF: http://wiki.ros.org/urdf/XML -->
  <!-- Documentation on Xacro: http://wiki.ros.org/xacro -->
  
  <!-- Xacro properties are constants. -->
  <!-- Size of square 'camera' box -->
  <xacro:property name="camera_link" value="0.05" />

  <!-- Dimensions of base. -->
  <xacro:property name="base_link_size_x" value="0.6" />
  <xacro:property name="base_link_size_y" value="0.3" />
  <xacro:property name="base_link_size_z" value="0.3"/>

  <!-- Dimensions of head. -->
  <xacro:property name="head_link_size_x" value="0.15" />
  <xacro:property name="head_link_size_y" value="0.15" />
  <xacro:property name="head_link_size_z" value="0.15" />
  
  <!-- Origin position of head.  -->
  <!-- 
    *BUG*: 
    For some mysterious reason, even when all values are 0,
    the link refuses to stay grounded and floats above base.
  -->
  <xacro:property name="head_link_origin_x" value="0" />
  <xacro:property name="head_link_origin_y" value="0" />
  <xacro:property name="head_link_origin_z" value="0" />

  <link name="world"/>

  <!-- Description of base. -->
  <link name="base_link">
    <collision>
      <geometry>
        <box size="${base_link_size_x} ${base_link_size_y} ${base_link_size_z}"/>
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0 0 0.3"/>
    </collision>

    <visual>
      <geometry>
      <!-- http://wiki.ros.org/rviz/DisplayTypes/Axes -->
      <!-- Red, Green, Blue -->
      <!-- x, y, z -->
        <box size="${base_link_size_x} ${base_link_size_y} ${base_link_size_z}"/> 
      </geometry>
      <origin rpy="0 1.57075 0" xyz="0 0 0.3"/>
    </visual>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1"/>
      <inertia
        ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0"/>
    </inertial>
  </link>

  <!-- Description of head. -->
  <link name="head_link">
    <collision>
      <geometry>
        <box size="${head_link_size_x} ${head_link_size_y} ${head_link_size_z}" />
      </geometry>
      <origin rpy="0 1.57075 0" xyz="${head_link_origin_x} ${head_link_origin_y} ${head_link_origin_z}"/>
    </collision>

    <visual>
      <geometry>
        <box size="${head_link_size_x} ${head_link_size_y} ${head_link_size_z}" />
      </geometry>
      <origin rpy="0 1.57075 0" xyz="${head_link_origin_x} ${head_link_origin_y} ${head_link_origin_z}"/>
    </visual>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1"/>
      <inertia
        ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0"/>
    </inertial>

  </link>

  <!-- Description of camera. -->
  <link name="camera_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
         <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0" />
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>

  </link>

  <!-- Attach camera to head. -->
  <joint name="camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <!-- Determine measurements xyz. -->
    <origin xyz="${camera_link} 0 0" rpy="0 0 0"/>
    <parent link="head_link" />
    <child link="camera_link" />
  </joint>

  <!-- Attach base to world. -->
  <joint name="fixed" type="fixed">
    <parent link="world"/>
    <child link="base_link"/>
  </joint>

  <!-- Roll is around x, yaw is around z, and pitch is around y. -->


  <!-- Connect head with base which allows the head to move in 3D. -->
  <joint name="base_to_head_link" type="fixed">
    <origin xyz="0 0 0.68" />
    <parent link="base_link" />
    <child link="head_link" />
  </joint>

  <!-- Make color of body and head red. -->
  <gazebo reference="base_link">
    <material>Gazebo/DarkYellow</material>
  </gazebo>

  <gazebo reference="head_link">
    <material>Gazebo/White</material>
  </gazebo>

  <!-- Make colour of camera red. -->
  <gazebo reference="camera_link">
    <material>Gazebo/Red</material>
  </gazebo>

</robot>
