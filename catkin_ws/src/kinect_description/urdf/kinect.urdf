<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from kinect.urdf.xacro              | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="kinect_bot" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!--

  IMPORTANT!

  If you modify this Xacro based URDF description, please run:
  . update_urdf.sh
  from directory:
    kinect_description/urdf/
  to generate a new URDF.
  The generated URDF will then be used by Gazebo to spawn the kinect bot.

  Failure to do this will result in your change being not reflected in simulation.
  -->
  <!-- Documentation on URDF: http://wiki.ros.org/urdf/XML -->
  <!-- Documentation on Xacro: http://wiki.ros.org/xacro -->
  <!-- 
    Add support for Gazebo-ROS-Control.
    http://gazebosim.org/tutorials/?tut=ros_control
  -->
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
      <robotNamespace>/kinect_bot</robotNamespace>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    </plugin>
  </gazebo>
  <!-- Make color of body and head red. -->
  <gazebo reference="platform_link">
    <material>Gazebo/Grey</material>
  </gazebo>
  <gazebo reference="kinect_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <!-- Make colour of right camera red. -->
  <gazebo reference="sensor">
    <material>Gazebo/White</material>
  </gazebo>
  <gazebo reference="sensor">
    <sensor name="kinect_sensor" type="camera">
      <update_rate>30.0</update_rate>
      <camera name="kinect">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
                That pixel's noise value is added to each of its color
                channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>kinect/kinect_sensor</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>
  <material name="black">
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="grey">
    <color rgba="0.5 0.5 0.5 1.0"/>
  </material>
  <link name="world"/>
  <!-- Description of platform. -->
  <link name="platform_link">
    <collision>
      <geometry>
        <box size="0.4 0.4 0.5"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0.25"/>
    </collision>
    <visual>
      <geometry>
        <box size="0.4 0.4 0.5"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0.25"/>
      <material name="grey"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="1"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!-- Description of kinect. will be very basic -->
  <link name="kinect_link">
    <collision>
      <geometry>
        <box size="0.2 0.05 0.05"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0.525"/>
    </collision>
    <visual>
      <geometry>
        <box size="0.2 0.05 0.05"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0.525"/>
      <material name="black"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="1"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!-- Description of sensor.-->
  <link name="sensor">
    <collision>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
    </collision>
    <visual>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0.4875"/>
      <material name="white"/>
    </visual>
    <inertial>
      <mass value="1e-5"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- Attach platform to world. -->
  <joint name="platform_to_world" type="fixed">
    <parent link="world"/>
    <child link="platform_link"/>
  </joint>
  <!-- Attach kinect to platform -->
  <joint name="kinect_to_platform" type="fixed">
    <parent link="platform_link"/>
    <child link="kinect_link"/>
  </joint>
  <!-- Attach sensor to the kinect. -->
  <joint name="sensor_to_kinect" type="fixed">
    <axis xyz="0 1 0"/>
    <!-- Determine measurements xyz. -->
    <origin rpy="0 0 0" xyz="0.063 -0.035 0.035"/>
    <parent link="kinect_link"/>
    <child link="sensor"/>
  </joint>
</robot>
