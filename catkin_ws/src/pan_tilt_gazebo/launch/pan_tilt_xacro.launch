<launch>

  <!-- Define name and spawn location in simulation of robot. -->
  <arg name="bot_name" default="pan_tilt" doc="Default value set to 'pan_tilt'. Do not override!" /> 
  <arg name="init_x" default="-7.0" doc="X coordinate of robot spawn location." />
  <arg name="init_y" default="-7.0" doc="Y coordinate of robot spawn location." />
  <arg name="init_z" default="0.0" doc="Z coordinate of robot spawn location." />
  <arg name="init_roll" default="0.0" />
  <arg name="init_pitch" default="0.0" />
  <arg name="init_yaw" default="0.0" />

  <!-- Convert Xacro robot description into URDF description because Gazebo only accepts URDF. --> 
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find pan_tilt_description)/urdf/pan_tilt.urdf.xacro'" />

  <!-- Spawn simulation. -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" > 
    <arg name="world_name" value="$(find pan_tilt_gazebo)/worlds/petrol_station.world" />
  </include> 

  <!-- Spawn robot in simulation. -->
  <node name="spawn_robot" pkg="gazebo_ros" type="spawn_model"
        args="-param robot_description
              -urdf
              -x $(arg init_x)
              -y $(arg init_y)
              -z $(arg init_z)
              -R $(arg init_roll)
              -P $(arg init_pitch)
              -Y $(arg init_yaw)
              -model $(arg bot_name)"
        respawn="false" output="screen">
  </node>

  <!-- Spawn ros_control nodes to allow joint control in simulation. -->
  <group>
    <include file="$(find pan_tilt_control)/launch/pan_tilt_control.launch" />
  </group>

<!-- Start rosbridge server on port 9090. -->
<include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch">
  <param name="port" value="9090" />
</include>

<!-- file_server is a ros_sharp dependency which is used for transacting with Unity based clients. -->
<node name="file_server" pkg="file_server" type="file_server" output="screen" />

<node name="joy_to_float" pkg="pan_tilt_gazebo" type="joint_neck_publisher" output="screen" />

<!-- Initialise Turtlebot. -->
<group ns="turtlebot">
  <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->                     
  <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
  <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->             
  <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->  

  <include file="$(find turtlebot_gazebo)/launch/includes/$(arg base).launch.xml">                            
    <arg name="base" value="$(arg base)"/>                                                                    
    <arg name="stacks" value="$(arg stacks)"/>                                                                
    <arg name="3d_sensor" value="$(arg 3d_sensor)"/>                                                          
  </include> 

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">                
    <param name="publish_frequency" type="double" value="30.0" />                                             
  </node>   

  <!-- Fake laser -->                                                                                         
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>                        
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"                                           
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">           
    <param name="scan_height" value="10"/>                                                                    
    <param name="output_frame_id" value="/camera_depth_frame"/>                                               
    <param name="range_min" value="0.45"/>                                                                    
    <remap from="image" to="/camera/depth/image_raw"/>                                                        
    <remap from="scan" to="/scan"/>                                                                           
  </node>     
</group>

<!-- Node for converting keyboard input to Twist messages (turtlebot movement command helper) -->
<node name="keys_to_twist" pkg="pan_tilt_gazebo" type="keys_to_twist.py" output="screen" 
launch-prefix="gnome-terminal --command" />

<!-- Node for accepting keyboard input for controlling the turtlebot. -->
<node name="key_publisher" pkg="pan_tilt_gazebo" type="key_publisher.py" output="screen"
launch-prefix="gnome-terminal --command" />

</launch>

